DISPLAY MACRO VAR

	PUSH CX

	MOV AX, VAR
	MOV BX, 10     ;INITIALIZES DIVISOR
	;MOV DX, 0000H    ;CLEARS DX
	MOV CX, 0000H    ;CLEARS CX
    
	;SPLITTING PROCESS STARTS HERE
	L1:  MOV DX, 0000H    ;CLEARS DX DURING JUMP
	DIV BX      ;DIVIDES AX BY BX
	PUSH DX     ;PUSHES DX(REMAINDER) TO STACK
	INC CX      ;INCREMENTS COUNTER TO TRACK THE NUMBER OF DIGITS
	CMP AX, 0     ;CHECKS IF THERE IS STILL SOMETHING IN AX TO DIVIDE
	JNE L1     ;JUMPS IF AX IS NOT ZERO
    
	L2: 
	POP DX      ;POPS FROM STACK TO DX
	ADD DX, 3030H     ;CONVERTS TO IT'S ASCII EQUIVALENT
	
	MOV AH, 02H     
	INT 21H      ;CALLS DOS TO DISPLAY CHARACTER
	LOOP L2    ;LOOPS TILL CX EQUALS ZERO

	POP CX
ENDM

.MODEL SMALL
.DATA
    FIB DW 5 DUP(0)
    N DW 5
    SEP DB " --> $"
.CODE
    MOV AX, @DATA
    MOV DS, AX

	;Initial Conditions
    MOV SI, 0
    MOV FIB[SI], 0
    ADD SI, 2
    MOV FIB[SI], 1

    MOV CX, N
    SUB CX, 2

    MOV AX, 1
	
	;Iteratively calculate higher values of the Fibonacci Sequence
	CALC:
		ADD AX, FIB[SI - 2]
		ADD SI, 2
		MOV FIB[SI], AX
	LOOP CALC

	MOV CX, N
	MOV SI, 0

	;Display the Fibonacci Sequence
	DISP:
		DISPLAY FIB[SI]

		MOV AH, 09H
		LEA DX, SEP
		INT 21H

		ADD SI, 2
		LOOP DISP

	MOV AH, 4CH
	INT 21H
END
